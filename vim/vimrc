source ~/dotfiles/vim/plugs.vim

packadd! termdebug

if filereadable("Session.vim")
  silent! source Session.vim
endif

inoremap jk <Esc>

let env_color_light=$ENV_COLOR_LIGHT
if (env_color_light == '1')
  set background=light
else
  set background=dark
endif

" Uncomment this for Solarized
" silent! colorscheme solarized

" Mods for Nord
augroup NordMods
    autocmd!
    autocmd ColorScheme nord highlight CursorLineNr guifg=#81A1C1 guibg=#3B4252
augroup end

" Uncomment these for Nord
set termguicolors
let g:nord_comment_brightness = 15
silent! colorscheme nord

" show existing tab with 4 spaces width
" set tabstop=4
" " when indenting with '>', use 4 spaces width
" set shiftwidth=4
" " On pressing tab, insert 4 spaces
" set expandtab

let g:pencil#conceallevel = 0

" Uncomment line below to autostrip trailing whitespace on buffer write
autocmd FileType c,cpp,cs,java,make,perl,vim,markdown,text,tla,xml autocmd BufWritePre <buffer> :%s/\s\+$//e

" Automatically open quickfix window after any grep
autocmd QuickFixCmdPost *grep* cwindow

" Don't swamp buffer list with fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" Make sure always to cd to cwd for each file opened in quickfix
" to resolve filenames consistenly and to avoid (hopefully) any
" cd's to other dirs than cwd.
autocmd BufAdd * exe "cd" fnameescape(getcwd())

set hidden
set cursorline
set number
set nobackup
set noswapfile
set showtabline=1
set foldlevelstart=99
" set foldmethod=syntax
set belloff=all

" Airline configuration
let g:airline_skip_empty_sections = 1
let g:airline#extensions#obsession#enabled = 1
let g:airline_section_x = '%{PencilMode()}'
let g:airline_section_y = ''
" let g:airline_section_y = '%{fnamemodify(getcwd(), ":~:.")}'

let g:airline_symbols = get(g:,'airline_symbols',{})
let g:airline_symbols.maxlinenr=''

" Termdebug layout
let g:termdebug_wide=1

" GitGutter is more snappy with a smaller updatetime
set updatetime=100


" Map leader
let mapleader = "\<Space>"

function! GetSearchPath()
  let l:output = system("git rev-parse --show-toplevel")
  if v:shell_error == 0
    let l:output = substitute(l:output, "\\n", "", "")
  else
    let l:output = expand("%:p:h")
  endif
  return l:output
endfunction

" nnoremap <leader>g :Ag! --ignore tags <C-R>=expand("<cword>")<CR> <C-R>=GetSearchPath()<CR>

" Use ag for ack
" if executable('ag')
"   let g:ackprg = 'ag --vimgrep'
" endif

" Use rg for ack
if executable('rg')
  let g:ackprg = 'rg --vimgrep --no-heading -g!tags'
endif

" rg mappings
nnoremap <Leader>g :Ack <C-R>=expand("<cword>")<CR><CR>
nnoremap <leader>R :Ack<Space>

" Ggrep mapping
" nnoremap <leader>g :Ggrep <C-R>=expand("<cword>")<CR><CR><CR>

" Fugitive mappings
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gb :Gblame<CR>
" FZF mappings
nnoremap <Leader>t :Tags<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>h :Helptags<CR>

" Close quickfix window
nnoremap <Leader>c :ccl<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Load project specific vim configuration (vim must start from .vim.custom folder)
if filereadable(".vim.custom")
  so .vim.custom
endif


